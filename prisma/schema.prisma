// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  FREELANCER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CLIENT)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile details
  bio           String?   @db.Text
  skills        String?   @db.Text // JSON array of skills
  hourlyRate    Float?
  
  // Relations
  postedGigs     Gig[]        @relation("ClientGigs")
  portfolios     Portfolio[]
  proposals      Proposal[]
  sentMessages   Message[]     @relation("SentMessages")
  receivedMessages Message[]   @relation("ReceivedMessages")
  meetings       Meeting[]
  payments       Payment[]     @relation("UserPayments")
  receivedPayments Payment[]   @relation("FreelancerPayments")
}

model Gig {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  budget      Float
  timeline    String   // e.g., "5 days", "2 weeks"
  skills      String   @db.Text // JSON array of required skills
  status      GigStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  clientId    String
  client      User     @relation("ClientGigs", fields: [clientId], references: [id])
  proposals   Proposal[] @relation("GigProposals")
  selectedProposalId String? @unique
  selectedProposal   Proposal? @relation(fields: [selectedProposalId], references: [id])
  progress    Progress[]

  @@index([clientId])
}

enum GigStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Portfolio {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  images      String   @db.Text // JSON array of image URLs
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  proposals   Proposal[]

  @@index([userId])
}

model Proposal {
  id          String   @id @default(cuid())
  coverLetter String   @db.Text
  timeline    String
  price       Float
  status      ProposalStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  gigId       String
  gig         Gig      @relation("GigProposals", fields: [gigId], references: [id])
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])
  selectedForGigs Gig[]

  @@index([userId])
  @@index([gigId])
  @@index([portfolioId])
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  startTime   DateTime
  endTime     DateTime
  meetingUrl  String?
  boardUrl    String?  // Excalidraw board URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())

  // Relations
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId])
  @@index([receiverId])
}

model Progress {
  id          String   @id @default(cuid())
  description String   @db.Text
  percentage  Int
  files       String?  @db.Text // JSON array of file URLs
  createdAt   DateTime @default(now())

  // Relations
  gigId       String
  gig         Gig      @relation(fields: [gigId], references: [id])

  @@index([gigId])
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  type          PaymentType
  razorpayId    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userId        String
  user          User     @relation("UserPayments", fields: [userId], references: [id])
  freelancerId  String
  freelancer    User     @relation("FreelancerPayments", fields: [freelancerId], references: [id])

  @@index([userId])
  @@index([freelancerId])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentType {
  ADVANCE
  FINAL
  MILESTONE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 